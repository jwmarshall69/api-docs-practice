# openapi/openapi.yaml
openapi: 3.0.3
info:
  title: Example Items API
  version: 1.0.0
  description: |
    A small sample API for learning docs-as-code. Use this as a source of truth
    for generating/validating examples and keeping your docs synced with the API.

servers:
  - url: https://api.example.com/v1
    description: Example production server (replace with your mock or real server)

tags:
  - name: Items
    description: Manage items in your catalog

paths:
  /items:
    get:
      summary: List items
      tags: [Items]
      parameters:
        - in: query
          name: limit
          description: Results per page
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
        - in: query
          name: cursor
          description: Opaque pagination cursor from previous response
          schema: { type: string }
      responses:
        "200":
          description: OK
          headers:
            X-RateLimit-Remaining:
              description: Remaining requests in the current window
              schema: { type: integer }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItemsResponse"
              examples:
                success:
                  value:
                    data:
                      - id: itm_123
                        name: Widget
                        price: 19.99
                        createdAt: "2025-01-15T12:00:00Z"
                    nextCursor: "eyJwYWdlIjoyfQ=="
    post:
      summary: Create item
      tags: [Items]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
            examples:
              basic:
                value: { name: "Widget", price: 19.99, metadata: { color: "blue" } }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
              examples:
                created:
                  value: { id: itm_789, name: "Widget", price: 19.99, createdAt: "2025-01-20T10:05:00Z" }
        "400":
          description: Bad Request
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /items/{id}:
    get:
      summary: Get item
      tags: [Items]
      parameters:
        - $ref: "#/components/parameters/ItemId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
        "404":
          description: Not Found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Delete item
      tags: [Items]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/ItemId"
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ItemId:
      in: path
      name: id
      required: true
      description: Item identifier (e.g., itm_123)
      schema: { type: string }

  schemas:
    Item:
      type: object
      required: [id, name, price, createdAt]
      properties:
        id: { type: string, example: itm_123 }
        name: { type: string, example: Widget }
        price: { type: number, format: float, example: 19.99 }
        createdAt: { type: string, format: date-time, example: "2025-01-15T12:00:00Z" }

    CreateItemRequest:
      type: object
      required: [name, price]
      properties:
        name: { type: string, minLength: 1, maxLength: 80 }
        price: { type: number, format: float, minimum: 0 }
        metadata:
          type: object
          additionalProperties: { type: string }
      example:
        name: "Widget"
        price: 19.99
        metadata: { color: "blue" }

    ListItemsResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Item" }
        nextCursor:
          type: string
          nullable: true
          description: Cursor to fetch the next page (or null/absent when done)

    Error:
      type: object
      required: [error, message]
      properties:
        error: { type: string, example: "bad_request" }
        message: { type: string, example: "Missing field 'name'." }
        requestId: { type: string, example: "req_9AbcXyZ" }
